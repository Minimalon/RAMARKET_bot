from decimal import Decimal
import re
from core.utils.callbackdata import QuantityProduct
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from core.utils.states import StateCreateOrder
import core.database.query_db as query_db
from loguru import logger
from core.oneC import utils
from core.keyboards import inline


async def error_message(message: Message, exception, state: FSMContext):
    text = f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñüö®–û–®–ò–ë–ö–êüö®‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
           f"{exception}"
    await message.answer(text)
    await state.set_state(StateCreateOrder.ERROR)


async def get_price(call: CallbackQuery, state: FSMContext, callback_data: QuantityProduct):
    await query_db.update_order(chat_id=call.message.chat.id, quantity=callback_data.quantity)
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(StateCreateOrder.GET_PRICE)


async def check_price(message: Message, state: FSMContext):
    try:
        price = message.text
        if re.findall(',', message.text):
            if len(message.text.split(',')) > 2:
                text = f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñüö®–û–®–ò–ë–ö–êüö®‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                       f"–í–≤–æ–¥ —Ü–µ–Ω—ã —Ä–∞–∑—Ä–µ—à–µ–Ω —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É\n–ü—Ä–∏–º–µ—Ä –∫–∞–∫ –Ω–∞–¥–æ: <b>10.12</b>"
                await message.answer(text, parse_mode='HTML')
                await state.set_state(StateCreateOrder.GET_PRICE)
                return
            price = price.replace(',', '.')

        check_price = price.replace('.', '')
        if not check_price.isdecimal():
            text = f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñüö®–û–®–ò–ë–ö–êüö®‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                   f"–¶–µ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ –Ω—É–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n–ü—Ä–∏–º–µ—Ä –∫–∞–∫ –Ω–∞–¥–æ: <b>10.12</b>"
            await message.answer(text, parse_mode='HTML')
            return

        await query_db.update_order(chat_id=message.chat.id, price=Decimal(price))
        log = logger.bind(name=message.chat.first_name, chat_id=message.chat.id, price=str(price))
        log.info("–í–≤–µ–ª–∏ —Ü–µ–Ω—É")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û (–ø–æ–ª–Ω–æ—Å—Ç—å—é)")
        await state.set_state(StateCreateOrder.GET_CLIENT_NAME)
    except Exception as ex:
        logger.exception(ex)
        await error_message(message, ex, state)


async def get_client_name_CALLBACK(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û (–ø–æ–ª–Ω–æ—Å—Ç—å—é)")
    await state.set_state(StateCreateOrder.GET_CLIENT_NAME)


async def check_client_name(message: Message, state: FSMContext):
    try:
        name = message.text
        if len(name.split()) == 3:
            await query_db.update_order(chat_id=message.chat.id, client_name=name)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç–∞\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>79934055805</code>", parse_mode='HTML')
            await state.set_state(StateCreateOrder.GET_CLIENT_PHONE)
        else:
            text = f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñüö®–û–®–ò–ë–ö–êüö®‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                   f"–§–ò–û —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3 —Å–ª–æ–≤, –∞ –≤–∞—â–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ {len(name.split())} —Å–ª–æ–≤\n" \
                   f"<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b>"
            await message.answer(text)
            logger.bind(name=message.chat.first_name, chat_id=message.chat.id, client_name=str(name)).info("–í–≤–µ–ª–∏ –§–ò–û")
            await state.set_state(StateCreateOrder.GET_CLIENT_NAME)
    except Exception as ex:
        logger.exception(ex)
        await error_message(message, ex, state)


async def check_client_phone(message: Message, state: FSMContext):
    try:
        client_phone = ''.join(re.findall(r'[0-9]*', message.text))
        logger.bind(name=message.chat.first_name, chat_id=message.chat.id, client_phone=str(client_phone))
        if re.findall('[0-9]{11}', client_phone):
            logger.info("–í–≤–µ–ª–∏ —Å–æ—Ç–æ–≤—ã–π")
            await query_db.update_order(chat_id=message.chat.id, client_phone=client_phone)
            await create_order(message, state)
        else:
            logger.error("–í–≤–µ–ª–∏ —Å–æ—Ç–æ–≤—ã–π")
            text = ("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç –∏–∑ 11 —Ü–∏—Ñ—Ä\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>79934055805</code>\n"
                    "<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b>")
            await message.answer(text, parse_mode="HTML")
            await state.set_state(StateCreateOrder.GET_CLIENT_PHONE)
    except Exception as ex:
        logger.exception(ex)
        await error_message(message, ex, state)


async def create_order(message: Message, state: FSMContext):
    try:
        chat_id = message.chat.id
        order = await query_db.get_order_info(chat_id=chat_id)
        price = Decimal(order.price).quantize(Decimal('1.00'))
        currency = await query_db.get_currency_name(chat_id=chat_id)
        product_name = (await utils.get_tovar_by_ID(order.product_id))["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"]
        payment_name = (await utils.get_payment_name(order.paymentGateway))["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"]
        seller_phone = (await query_db.get_client_info(chat_id=chat_id)).phone_number
        shop_names = (await utils.get_shops(seller_phone))['–ú–∞–≥–∞–∑–∏–Ω—ã']
        shop_name = [shop['–ú–∞–≥–∞–∑–∏–Ω'] for shop in shop_names if shop['id–ú–∞–≥–∞–∑–∏–Ω'] == order.shop][0]
        sum_rub = Decimal((price * order.quantity) * order.currencyPrice).quantize(Decimal('1.00'))
        text = (f'‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:</b>\n'
                f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                f'<b>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞</b>: <code>{order.client_name}</code>\n'
                f'<b>–°–æ—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç–∞</b>: <code>+{order.client_phone}</code>\n'
                f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞</b>: <code>{shop_name}</code>\n'
                f'<b>–¢–∏–ø –æ–ø–ª–∞—Ç—ã</b>: <code>{payment_name}</code>\n'
                f'<b>–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã</b>: <code>{order.currencyPrice}</code>\n'
                f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>: <code>{product_name}</code>\n'
                f'<b>–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞</b>: <code>{price} {currency}</code>\n'
                f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>: <code>{order.quantity}</code>\n'
                f'<b>–ò—Ç–æ–≥–æ</b>: <code>{Decimal(price) * order.quantity} {currency} / {sum_rub} —Ä—É–±</code>')
        await message.answer(text, reply_markup=inline.getKeyboard_createOrder(), parse_mode="HTML")
    except Exception as ex:
        logger.exception(ex)
        await error_message(message, ex, state)
