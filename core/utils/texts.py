import re

from funcy import str_join

from config import __, _
from core.models_pydantic.order import Order

# region ERRORS
error_head = __("‚ûñ‚ûñüö®–û–®–ò–ë–ö–êüö®‚ûñ‚ûñ\n")
error_fakeContact = __(f'{error_head}–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª <u><b>–Ω–µ —Å–≤–æ–π</b></u> –∫–æ–Ω—Ç–∞–∫—Ç')
error_cancel = __("{error_head}–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞").format(error_head=error_head)
error_price_double_comma = __("{error_head}–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π –∑–∞–ø—è—Ç–æ–π\n–ü—Ä–∏–º–µ—Ä –∫–∞–∫ –Ω–∞–¥–æ: <b>10.12</b>").format(
    error_head=error_head)

error_price_not_decimal = __(
    "{error_head}–¶–µ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ –Ω—É–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n–ü—Ä–∏–º–µ—Ä –∫–∞–∫ –Ω–∞–¥–æ: <u><b>10.12</b></u>").format(
    error_head=error_head)

error_article_not_decimal = __("{error_head}–†–∞–∑—Ä–µ—à–µ–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞").format(
    error_head=error_head)

error_not_found_order = __("{error_head}–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑.").format(
    error_head=error_head)
download = ("–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...\n"
            "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ –∏ –Ω–µ —Ç—Ä–æ–≥–∞–π—Ç–µ. –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–∂–µ—Ç –¥–ª–∏—Ç—Å—è –¥–∞–∂–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç\n")


def error_full_name(name):
    return __(
        "{error_head}–§–ò–û —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3 —Å–ª–æ–≤, –∞ –≤–∞—à–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ {count} —Å–ª–æ–≤\n<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b>").format(
        error_head=error_head, count=len(name.split()))


def error_article_not_found(article):
    return __.format(
        error_head=error_head)


def error_server(response):
    return __("{error_head}–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –µ–≥–æ –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ '{response}'\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ —Å–Ω–æ–≤–∞.").format(
        error_head=error_head, response=response.status)


# endregion

menu = __('<u><b>–ó–∞–∫–∞–∑</b></u> - –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é\n'
          '<u><b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b></u> - –õ–∏—á–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n'
          '<u><b>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤</b></u> - –ü–æ–ª—É—á–∏—Ç—å Excel —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏—è–º–∏ –∑–∞–∫–∞–∑–æ–≤')

succes_registration = __('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –ø—Ä–æ–π–¥–µ–Ω–∞')
need_reg = __(
    '–í—ã –∑–∞—à–ª–∏ –≤–ø–µ—Ä–≤—ã–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
)


def menu_new_language(language='ru'):
    return __('<u><b>–ó–∞–∫–∞–∑</b></u> - –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é\n'
              '<u><b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b></u> - –õ–∏—á–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n'
              '<u><b>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤</b></u> - –ü–æ–ª—É—á–∏—Ç—å Excel —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏—è–º–∏ –∑–∞–∫–∞–∑–æ–≤', locale=language)


def cart(order: Order) -> str:
    text = ''

    def text_total_price(first_sum=None, first_currency=None, second_sum=None, second_currency=None):
        text = f'<b>–û–±—â–∞—è —Å—É–º–º–∞</b>: <code>'
        if first_currency and first_sum:
            text += f'{first_sum} {first_currency}'
        if second_currency and second_sum:
            text += f' / {second_sum} {second_currency}'
        text += '</code>\n'
        return text

    for index, product in enumerate(order.cart, 1):
        text += (f'‚ÑπÔ∏è<b>–¢–æ–≤–∞—Ä ‚Ññ{index}:</b>\n'
                 f'      <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>: <code>{product.name}</code>\n'
                 f'      <b>–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞</b>: <code>{product.price} {order.currency.name}</code>\n'
                 f'      <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>: <code>{product.quantity}</code>\n')
    if order.rezident == '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω':
        if order.client_name:
            text += text_total_price(order.sum_kzt, 'KZT', order.sum_usd, 'USD')
        else:
            text += text_total_price(order.sum_usd, 'USD', order.sum_kzt, 'KZT')
        if order.tax > 0:
            text += f"<b>–û–±—â–∞—è —Å—É–º–º–∞ —Å –∫–æ–º–∏—Å—Å–∏–µ–π</b>: <code>{order.tax_sum_kzt} KZT / {order.tax_sum_usd} USD</code>\n"
    elif order.shop.currency == 'TRY':
        if order.currency.name == 'RUB':
            text += text_total_price(order.sum_rub, order.currency.name, order.sum_try, 'TRY')
        elif order.currency.name == 'TRY':
            text += text_total_price(order.sum_try, order.currency.name, order.sum_rub, 'RUB')
    else:
        if order.currency.name == 'RUB':
            text += text_total_price(order.sum_rub, order.currency.name, order.sum_usd, 'USD')
        elif order.currency.name == 'USD':
            text += text_total_price(order.sum_usd, order.currency.name, order.sum_rub, 'RUB')
    # if order.currency.name == 'KZT':
    #     text += text_total_price(order.sum_kzt, order.currency.name, order.sum_usd, 'USD')
    return text


async def createOrder(order: Order) -> str:
    if order.client_phone is not None:
        mail_or_phone = order.client_phone
        message = __("–°–æ—Ç–æ–≤—ã–π")
    else:
        mail_or_phone = order.client_mail
        message = __("–ü–æ—á—Ç–∞")

    # text = __(
    #     '‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:</b>\n'
    #     '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
    #     '<b>–§–ò–û –∫–ª–∏–µ–Ω—Ç–∞</b>: <code>{client_name}</code>\n'
    #     '<b>{message} –∫–ª–∏–µ–Ω—Ç–∞</b>: <code>{mail_or_phone}</code>\n'
    #     '<b>–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞</b>: <code>{shop_name}</code>\n'
    #     '<b>–¢–∏–ø –æ–ø–ª–∞—Ç—ã</b>: <code>{payment_name}</code>\n'
    #     '<b>–ö–æ–º–∏—Å—Å–∏—è</b>: <code>{tax} %</code>\n'
    #     '<b>–í–∞–ª—é—Ç–∞</b>: <code>{currency}</code>\n'
    #     '<b>–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã</b>: <code>{currencyPrice}</code>\n'
    # ).format(client_name=order.client_name,
    #          message=message,
    #          mail_or_phone=mail_or_phone,
    #          shop_name=order.shop.name,
    #          payment_name=order.payment.name,
    #          tax=order.tax * 10,
    #          currencyPrice=order.currency.price,
    #          currency=order.currency.name)
    text = '‚ÑπÔ∏è<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:</b>‚ÑπÔ∏è\n'
    text += '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
    text += (
        f'<b>–§–ò–û –∫–ª–∏–µ–Ω—Ç–∞</b>: <code>{order.client_name}</code>\n'
        f'<b>{message} –∫–ª–∏–µ–Ω—Ç–∞</b>: <code>{mail_or_phone}</code>\n'
        f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞</b>: <code>{order.shop.name}</code>\n'
        f'<b>–¢–∏–ø –æ–ø–ª–∞—Ç—ã</b>: <code>{order.payment.name}</code>\n'
        f'<b>–í–∞–ª—é—Ç–∞</b>: <code>{order.currency.name}</code>\n'
        f'<b>–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã</b>: <code>{order.currency.price}</code>\n'
    )
    if order.tax > 0:
        text += f'<b>–ö–æ–º–∏—Å—Å–∏—è</b>: <code>{order.tax * 100} %</code>\n'
    text += cart(order)
    return text


async def qr(order_id: str, order: Order) -> str:
    text = _('<b><u>–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω</u></b>‚úÖ\n')
    text += _('<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞</b>: <code>{order_id}</code>\n'.format(order_id=order_id))
    text += await createOrder(order)
    return text


def phone(phone):
    phone = str_join(sep="", seq=re.findall(r'[0-9]*', phone))
    if re.findall(r'^89', phone):
        return re.sub(r'^89', '79', phone)
    return phone


def phoneNotReg(phone):
    text = error_head + \
           __(f'–í–∞—à —Å–æ—Ç–æ–≤—ã–π "{phone}" –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ\n'
              f'–£—Ç–æ—á–Ω–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
    return text


if __name__ == '__main__':
    print(100 * 0)
